import os
import sys
import pygame

os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "HIDE"
screen = None

class Engine:
    screen = None
    clock = None
    running = False

    @staticmethod
    def Init(width=800, height=800):
        pygame.init()
        Engine.screen = pygame.display.set_mode((width, height))
        Engine.clock = pygame.time.Clock()
        Engine.running = True
        Engine.screen.fill((0, 0, 0))
        pygame.display.flip()

    @staticmethod
    def Run():
        from UnipyEngine.Core import GameObject

        while Engine.running:
            Engine.screen.fill((0, 0, 0))
            dt = Engine.clock.tick(60) / 1000.0

            for gameObject in GameObject.instances:
                for component in gameObject.components:
                    if hasattr(component, "Update") and callable(component.Update):
                        component.Update(dt)

            pygame.display.flip()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    Engine.running = False

        pygame.quit()

    @staticmethod
    def LoadScripts(folder="Assets"):
        if not os.path.exists(folder):
            print(f"UnipyEngine: Scripts folder '{folder}' not found")
            return

        init_file = os.path.join(folder, "__init__.py")

        # 1. récupérer les scripts "connus" dans __init__.py
        known_files = set()
        if os.path.exists(init_file):
            with open(init_file, "r", encoding="utf-8") as f:
                for line in f:
                    if line.startswith("from ."):
                        modname = line.split()[1].lstrip(".")
                        known_files.add(modname)

        # 2. récupérer les scripts réellement présents
        current_files = set(
            os.path.splitext(f)[0]
            for f in os.listdir(folder)
            if f.endswith(".py") and f != "__init__.py"
        )

        # 3. comparer
        if current_files != known_files:
            with open(init_file, "w", encoding="utf-8") as f:
                f.write("# Auto-generated by UnipyEngine.Engine\n")
                for modname in sorted(current_files):
                    f.write(f"from .{modname} import *\n")

            print("UnipyEngine: Scripts changed. Reloading complete.")
            sys.exit(0)

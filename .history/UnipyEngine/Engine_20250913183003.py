import os
import sys
import importlib
import pygame

os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "HIDE"
screen = None

class Engine:
    screen = None
    clock = None
    running = False
    loaded_scripts = set()  # scripts déjà chargés

    @staticmethod
    def Init(width=800, height=800):
        pygame.init()
        Engine.screen = pygame.display.set_mode((width, height))
        Engine.clock = pygame.time.Clock()
        Engine.running = True
        Engine.screen.fill((0, 0, 0))
        pygame.display.flip()

    @staticmethod
    def Run():
        from UnipyEngine.Core import GameObject

        while Engine.running:
            Engine.screen.fill((0, 0, 0))
            dt = Engine.clock.tick(60) / 1000.0

            for gameObject in GameObject.instances:
                for component in gameObject.components:
                    if hasattr(component, "Update") and callable(component.Update):
                        component.Update(dt)

            pygame.display.flip()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    Engine.running = False

        pygame.quit()

    @staticmethod
    def LoadScripts(folder="Assets"):
        if not os.path.exists(folder):
            print(f"UnipyEngine: Scripts folder '{folder}' not found")
            return

        init_file = os.path.join(folder, "__init__.py")

        # lister tous les fichiers .py du dossier (hors __init__.py)
        current_files = set(
            os.path.splitext(f)[0]
            for f in os.listdir(folder)
            if f.endswith(".py") and f != "__init__.py"
        )

        # régénérer __init__.py à chaque appel (ajouts ET suppressions)
        with open(init_file, "w", encoding="utf-8") as f:
            f.write("# Auto-generated by UnipyEngine.Engine\n")
            for module_name in current_files:
                f.write(f"from .{module_name} import *\n")

        # comparer avec ce qui était déjà chargé
        new_files = current_files - Engine.loaded_scripts
        removed_files = Engine.loaded_scripts - current_files

        print(new_files)
        print(removed_files)

        if new_files or removed_files:
            Engine.loaded_scripts = current_files
            print("UnipyEngine: Script set changed. Reloading complete.")
            sys.exit(0)  # forcer un redémarrage propre

        # charger les scripts existants
        for module_name in current_files:
            path = os.path.join(folder, f"{module_name}.py")
            spec = importlib.util.spec_from_file_location(module_name, path)
            module = importlib.util.module_from_spec(spec)
            sys.modules[module_name] = module
            try:
                spec.loader.exec_module(module)
                print(f"UnipyEngine : [{module_name}] loaded successfully")
                # injecter les classes dans globals()
                for name, obj in module.__dict__.items():
                    if isinstance(obj, type):
                        globals()[name] = obj
            except Exception as e:
                print(f"UnipyEngine : Error loading {module_name} -> {e}")
